#!/bin/bash

# Airbyte Installation Script
# Installs Airbyte via abctl with external PostgreSQL database

set -euo pipefail

# Source utility functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/utils.sh"

# Load environment variables
if [ -f .env ]; then
    set -a
    source .env
    set +a
else
    echo "‚ùå Error: .env file not found!"
    exit 1
fi

echo ""
echo "============================================"
echo "üîÑ Airbyte Installation via abctl"
echo "============================================"
echo ""

# Check if Airbyte profile is active
if ! grep -q "airbyte" <<< "${COMPOSE_PROFILES:-}"; then
    echo "‚ÑπÔ∏è  Airbyte profile not active. Skipping installation."
    exit 0
fi

# Step 1: Check if abctl is already installed
echo "üì¶ Checking for abctl..."
if command -v abctl &> /dev/null; then
    ABCTL_VERSION=$(abctl version 2>/dev/null || echo "unknown")
    echo "‚úì abctl is already installed (version: $ABCTL_VERSION)"
else
    echo "üì• Installing abctl..."
    
    # Install abctl
    if curl -LsfS https://get.airbyte.com | bash -; then
        echo "‚úì abctl installed successfully"
        
        # Add to PATH if needed
        if ! command -v abctl &> /dev/null; then
            export PATH="$HOME/.airbyte/bin:$PATH"
            echo "‚úì Added abctl to PATH"
        fi
    else
        echo "‚ùå Failed to install abctl"
        exit 1
    fi
fi

# Step 2: Wait for PostgreSQL to be ready
echo ""
echo "‚è≥ Waiting for Airbyte PostgreSQL to be ready..."

MAX_WAIT=60
COUNTER=0

while [ $COUNTER -lt $MAX_WAIT ]; do
    if docker exec airbyte_postgres pg_isready -U airbyte &>/dev/null; then
        echo "‚úì PostgreSQL is ready"
        break
    fi
    
    if [ $COUNTER -eq 0 ]; then
        echo -n "   Waiting"
    else
        echo -n "."
    fi
    
    sleep 2
    COUNTER=$((COUNTER + 2))
done

if [ $COUNTER -ge $MAX_WAIT ]; then
    echo ""
    echo "‚ùå PostgreSQL failed to become ready after ${MAX_WAIT}s"
    exit 1
fi
echo ""

# Step 3: Verify database connection
echo "üîç Verifying database connection..."
if docker exec airbyte_postgres psql -U airbyte -d airbyte -c "SELECT version();" &>/dev/null; then
    echo "‚úì Database connection successful"
else
    echo "‚ùå Cannot connect to database"
    exit 1
fi

# Step 4: Create values.yaml for abctl with external database
echo ""
echo "üìù Creating Airbyte configuration..."

AIRBYTE_VALUES_FILE="/tmp/airbyte-values-$$.yaml"

cat > "$AIRBYTE_VALUES_FILE" << EOF
# Airbyte Configuration with External PostgreSQL
# Generated by AI LaunchKit installation script

# Disable built-in PostgreSQL (we use our own)
postgresql:
  enabled: false

# Configure external database connection
global:
  database:
    type: external
    host: host.docker.internal
    port: 5433
    database: airbyte
    user: airbyte
    password: ${AIRBYTE_POSTGRES_PASSWORD}

# Web UI configuration
webapp:
  url: https://${AIRBYTE_HOSTNAME}
EOF

echo "‚úì Configuration file created"

# Step 5: Install Airbyte via abctl
echo ""
echo "üöÄ Installing Airbyte..."
echo "‚è±Ô∏è  This may take 15-30 minutes depending on your internet connection."
echo ""

if abctl local install \
    --host 0.0.0.0 \
    --port 8000 \
    --values "$AIRBYTE_VALUES_FILE" 2>&1 | tee /tmp/airbyte-install.log; then
    
    echo ""
    echo "‚úì Airbyte installation completed"
else
    echo ""
    echo "‚ùå Airbyte installation failed. Check log: /tmp/airbyte-install.log"
    rm -f "$AIRBYTE_VALUES_FILE"
    exit 1
fi

# Step 6: Set custom password
echo ""
echo "üîê Configuring authentication..."

# Wait a moment for Airbyte to fully initialize
sleep 60

if abctl local credentials --password "${AIRBYTE_PASSWORD}" &>/dev/null; then
    echo "‚úì Custom password configured"
else
    echo "‚ö†Ô∏è  Warning: Could not set custom password, using auto-generated one"
fi

# Step 7: Retrieve and display credentials
echo ""
echo "üìã Retrieving credentials..."

# Get credentials
CREDENTIALS=$(abctl local credentials 2>/dev/null || echo "Could not retrieve credentials")

# Extract email from credentials (falls back to env variable)
if [ -n "$AIRBYTE_USERNAME" ]; then
    AIRBYTE_EMAIL="$AIRBYTE_USERNAME"
else
    AIRBYTE_EMAIL=$(echo "$CREDENTIALS" | grep "Email:" | awk '{print $2}' || echo "[email protected]")
fi

# Cleanup
rm -f "$AIRBYTE_VALUES_FILE"

# Step 8: Final verification
echo ""
echo "üîç Verifying Airbyte status..."

# Wait for health endpoint
MAX_HEALTH_WAIT=120
HEALTH_COUNTER=0

while [ $HEALTH_COUNTER -lt $MAX_HEALTH_WAIT ]; do
    if curl -sf http://localhost:8000/api/v1/health &>/dev/null; then
        echo "‚úì Airbyte is healthy and responding"
        break
    fi
    
    if [ $HEALTH_COUNTER -eq 0 ]; then
        echo -n "   Waiting for Airbyte to be ready"
    else
        echo -n "."
    fi
    
    sleep 5
    HEALTH_COUNTER=$((HEALTH_COUNTER + 5))
done
echo ""

if [ $HEALTH_COUNTER -ge $MAX_HEALTH_WAIT ]; then
    echo "‚ö†Ô∏è  Warning: Could not verify Airbyte health endpoint"
    echo "   Airbyte might still be starting up. Please check manually."
else
    echo "‚úì Airbyte is fully operational"
fi

# Success summary
echo ""
echo "============================================"
echo "‚úÖ Airbyte Installation Complete!"
echo "============================================"
echo ""
echo "Access Information:"
echo "  URL:      https://${AIRBYTE_HOSTNAME}"
echo "  Email:    ${AIRBYTE_EMAIL}"
echo "  Password: ${AIRBYTE_PASSWORD}"
echo ""
echo "Database Information:"
echo "  Metadata DB:     airbyte_postgres:5432/airbyte"
echo "  Marketing Data:  airbyte_postgres:5432/marketing_data"
echo ""
echo "Next Steps:"
echo "  1. Access Airbyte UI at: https://${AIRBYTE_HOSTNAME}"
echo "  2. Log in with the credentials above"
echo "  3. Configure your first data source"
echo "  4. Connect Metabase to 'marketing_data' database"
echo ""
echo "Integration URLs (for n8n):"
echo "  API: http://localhost:8000/api/v1/"
echo ""
echo "============================================"
echo ""
