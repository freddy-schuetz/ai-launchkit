volumes:
  n8n_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  whisper-models:
  caddy-data:
  caddy-config:
  valkey-data:
  langfuse_postgres_data:
  langfuse_clickhouse_data:
  langfuse_clickhouse_logs:
  langfuse_minio_data:
  libretranslate_models:
  libretranslate_cache:
  libretranslate_db:
  grafana:
  prometheus_data:
  letta_data:
  weaviate_data:
  portainer_data:
  comfyui_data:
  postiz-config:
  postiz-uploads:
  lightrag_data:
  odoo_data:
  baserow_data:
  vikunja-files:
  mysql-leantime-data:
  leantime-public:
  leantime-userfiles:
  leantime-plugins:
  leantime-logs:
  mailpit_data:
  postal_mariadb:
  postal_rabbitmq:
  postal_assets:
  postal_uploads:
  easyappointments_data:

x-n8n: &service-n8n
  build:
    context: ./n8n
    pull: true
  environment: &service-n8n-env
    DB_POSTGRESDB_DATABASE: postgres
    DB_POSTGRESDB_HOST: postgres
    DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
    DB_POSTGRESDB_USER: postgres
    DB_TYPE: postgresdb
    EXECUTIONS_MODE: queue
    LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}
    LANGCHAIN_ENDPOINT: ${LANGCHAIN_ENDPOINT}
    LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2}
    N8N_BINARY_DATA_MODE: filesystem
    N8N_PAYLOAD_SIZE_MAX: 256
    N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE: true
    N8N_DIAGNOSTICS_ENABLED: false
    N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
    N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: true
    N8N_METRICS: true
    N8N_PERSONALIZATION_ENABLED: false
    N8N_RUNNERS_ENABLED: true
    N8N_TRUST_PROXY: true
    N8N_USER_MANAGEMENT_JWT_SECRET: ${N8N_USER_MANAGEMENT_JWT_SECRET}
    NODE_ENV: production
    NODE_FUNCTION_ALLOW_BUILTIN: "*"
    NODE_FUNCTION_ALLOW_EXTERNAL: cheerio,axios,moment,lodash
    QUEUE_BULL_REDIS_HOST: ${REDIS_HOST:-redis}
    QUEUE_BULL_REDIS_PORT: ${REDIS_PORT:-6379}
    QUEUE_HEALTH_CHECK_ACTIVE: true
    WEBHOOK_URL: ${N8N_HOSTNAME:+https://}${N8N_HOSTNAME:-http://localhost:5678}/

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  environment:
    - OLLAMA_CONTEXT_LENGTH=8192
    - OLLAMA_FLASH_ATTENTION=1
    - OLLAMA_KV_CACHE_TYPE=q8_0
    - OLLAMA_MAX_LOADED_MODELS=2
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:7b-instruct-q4_K_M; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

services:
  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    container_name: flowise
    profiles: ["flowise"]
    environment:
      - PORT=3001
      - FLOWISE_USERNAME=${FLOWISE_USERNAME}
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  bolt:
    build:
      context: ./docker/bolt-diy
      dockerfile: Dockerfile
    container_name: bolt
    profiles: ["bolt"]
    # NO command here!
    expose:
      - "5173"
    environment:
      - BOLT_HOSTNAME=${BOLT_HOSTNAME}
      - OLLAMA_API_BASE_URL=http://ollama:11434
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
    volumes:
      - ./bolt-data:/app/data
      - ./shared:/workspace
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  openui:
    image: ghcr.io/wandb/openui:latest
    container_name: openui
    profiles: ["openui"]
    restart: unless-stopped
    expose:
      - "7878"
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - OPENAI_API_KEY=${OPENAI_API_KEY:-xxx}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - OPENAI_COMPATIBLE_ENDPOINT=${OPENAI_COMPATIBLE_ENDPOINT:-}
    volumes:
      - ./openui-data:/app/data
      - ./shared:/workspace
    extra_hosts:
      - "host.docker.internal:host-gateway"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    profiles: ["open-webui"]
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    profiles: ["n8n"]
    environment:
      <<: *service-n8n-env
      RUN_N8N_IMPORT: ${RUN_N8N_IMPORT:-false}
    entrypoint: /bin/sh
    command: /scripts/n8n_import_script.sh
    volumes:
      - ./n8n/backup:/backup
      - ./n8n/n8n_import_script.sh:/scripts/n8n_import_script.sh:ro
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    profiles: ["n8n"]
    restart: unless-stopped
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - ./media:/data/media      # <-- NEU hinzuf端gen
      - ./temp:/data/temp        # <-- NEU hinzuf端gen
    depends_on:
      n8n-import:
        condition: service_completed_successfully

  n8n-worker:
    <<: *service-n8n
    profiles: ["n8n"]
    restart: unless-stopped
    command: worker
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./shared:/data/shared
      - ./media:/data/media      # <-- NEU hinzuf端gen
      - ./temp:/data/temp        # <-- NEU hinzuf端gen
    depends_on:
      n8n:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      replicas: ${N8N_WORKER_COUNT:-1}

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    profiles: ["qdrant"]
    restart: unless-stopped
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}
    expose:
      - "6333"

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    profiles: ["neo4j"]
    restart: unless-stopped
    volumes:
      - ./neo4j/logs:/logs
      - ./neo4j/config:/config
      - ./neo4j/data:/data
      - ./neo4j/plugins:/plugins
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH_USERNAME}/${NEO4J_AUTH_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1",
        ]
      interval: 5s
      timeout: 3s
      retries: 5
    ulimits:
      nofile:
        soft: 40000
        hard: 40000

  caddy:
    container_name: caddy
    image: docker.io/library/caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
      - "7687:7687"
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./caddy-addon:/etc/caddy/addons:ro
      - caddy-data:/data:rw
      - caddy-config:/config:rw
    environment:
      - COMFYUI_HOSTNAME=${COMFYUI_HOSTNAME}
      - COMFYUI_PASSWORD_HASH=${COMFYUI_PASSWORD_HASH}
      - COMFYUI_USERNAME=${COMFYUI_USERNAME}
      - BASEROW_HOSTNAME=${BASEROW_HOSTNAME}
      - BASEROW_USERNAME=${BASEROW_USERNAME}
      - BASEROW_PASSWORD_HASH=${BASEROW_PASSWORD_HASH}
      - DIFY_HOSTNAME=${DIFY_HOSTNAME}
      - FLOWISE_HOSTNAME=${FLOWISE_HOSTNAME}
      - BOLT_HOSTNAME=${BOLT_HOSTNAME}
      - BOLT_USERNAME=${BOLT_USERNAME}
      - BOLT_PASSWORD_HASH=${BOLT_PASSWORD_HASH}
      - OPENUI_HOSTNAME=${OPENUI_HOSTNAME}
      - GRAFANA_HOSTNAME=${GRAFANA_HOSTNAME}
      - WHISPER_HOSTNAME=${WHISPER_HOSTNAME}
      - LANGFUSE_HOSTNAME=${LANGFUSE_HOSTNAME}
      - LEANTIME_HOSTNAME=${LEANTIME_HOSTNAME}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-internal}
      - LETTA_HOSTNAME=${LETTA_HOSTNAME}
      - LIBRETRANSLATE_HOSTNAME=${LIBRETRANSLATE_HOSTNAME}
      - LIBRETRANSLATE_USERNAME=${LIBRETRANSLATE_USERNAME}
      - LIBRETRANSLATE_PASSWORD_HASH=${LIBRETRANSLATE_PASSWORD_HASH}
      - LIGHTRAG_HOSTNAME=${LIGHTRAG_HOSTNAME}
      - ODOO_HOSTNAME=${ODOO_HOSTNAME}
      - ODOO_USERNAME=${ODOO_USERNAME}
      - ODOO_PASSWORD_HASH=${ODOO_PASSWORD_HASH}
      - PERPLEXICA_HOSTNAME=${PERPLEXICA_HOSTNAME}
      - PERPLEXICA_USERNAME=${PERPLEXICA_USERNAME}
      - PERPLEXICA_PASSWORD_HASH=${PERPLEXICA_PASSWORD_HASH}
      - N8N_HOSTNAME=${N8N_HOSTNAME}
      - NEO4J_HOSTNAME=${NEO4J_HOSTNAME}
      - PORTAINER_HOSTNAME=${PORTAINER_HOSTNAME}
      - POSTIZ_HOSTNAME=${POSTIZ_HOSTNAME}
      - PROMETHEUS_HOSTNAME=${PROMETHEUS_HOSTNAME}
      - PROMETHEUS_PASSWORD_HASH=${PROMETHEUS_PASSWORD_HASH}
      - PROMETHEUS_USERNAME=${PROMETHEUS_USERNAME}
      - QDRANT_HOSTNAME=${QDRANT_HOSTNAME}
      - RAGAPP_HOSTNAME=${RAGAPP_HOSTNAME}
      - RAGAPP_PASSWORD_HASH=${RAGAPP_PASSWORD_HASH}
      - RAGAPP_USERNAME=${RAGAPP_USERNAME}
      - SEARXNG_HOSTNAME=${SEARXNG_HOSTNAME}
      - SEARXNG_PASSWORD_HASH=${SEARXNG_PASSWORD_HASH}
      - SEARXNG_USERNAME=${SEARXNG_USERNAME}
      - SUPABASE_HOSTNAME=${SUPABASE_HOSTNAME}
      - TTS_AUTH_USER=${TTS_AUTH_USER}
      - TTS_AUTH_PASSWORD_HASH=${TTS_AUTH_PASSWORD_HASH}
      - TTS_HOSTNAME=${TTS_HOSTNAME}
      - VIKUNJA_HOSTNAME=${VIKUNJA_HOSTNAME}
      - WEAVIATE_HOSTNAME=${WEAVIATE_HOSTNAME}
      - WEBUI_HOSTNAME=${WEBUI_HOSTNAME}
      - EASYAPPOINTMENTS_HOSTNAME=${EASYAPPOINTMENTS_HOSTNAME}
      - WHISPER_AUTH_USER=${WHISPER_AUTH_USER}
      - WHISPER_AUTH_PASSWORD_HASH=${WHISPER_AUTH_PASSWORD_HASH}
      # Mail Services
      - MAILPIT_HOSTNAME=${MAILPIT_HOSTNAME}
      - POSTAL_HOSTNAME=${POSTAL_HOSTNAME}
      - POSTAL_USERNAME=${POSTAL_USERNAME}
      - POSTAL_PASSWORD_HASH=${POSTAL_PASSWORD_HASH}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
        
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    profiles: ["cloudflare-tunnel"]
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"  

  langfuse-worker:
    image: langfuse/langfuse-worker:3
    restart: always
    profiles: ["langfuse"]
    depends_on: &langfuse-depends-on
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment: &langfuse-worker-env
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/langfuse
      SALT: ${LANGFUSE_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-false}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH:-LOCALONLYREDIS}
      REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED:-false}
      REDIS_TLS_CA: ${REDIS_TLS_CA:-/certs/ca.crt}
      REDIS_TLS_CERT: ${REDIS_TLS_CERT:-/certs/redis.crt}
      REDIS_TLS_KEY: ${REDIS_TLS_KEY:-/certs/redis.key}

  langfuse-web:
    image: langfuse/langfuse:3
    restart: always
    profiles: ["langfuse"]
    depends_on: *langfuse-depends-on
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_URL: https://${LANGFUSE_HOSTNAME}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-organization_id}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-Organization}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-project_id}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-Project}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}
      AUTH_DISABLE_SIGNUP: ${AUTH_DISABLE_SIGNUP:-true}

  clickhouse:
    image: clickhouse/clickhouse-server
    restart: always
    profiles: ["langfuse"]
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s

  minio:
    image: minio/minio
    restart: always
    profiles: ["langfuse"]
    entrypoint: sh
    # create the 'langfuse' bucket before starting the service
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION:-latest}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    volumes:
      - valkey-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  # Baserow Database Init - Create database
  baserow-init:
    image: postgres:latest
    container_name: baserow-init
    profiles: ["baserow"]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    command: >
      sh -c "
      psql -h postgres -U postgres -c \"CREATE DATABASE baserow\" || true &&
      echo 'Baserow database ready'
      "
    restart: "no"

  baserow:
    image: baserow/baserow:1.35.0
    container_name: baserow
    profiles: ["baserow"]
    restart: unless-stopped
    environment:
      - BASEROW_PUBLIC_URL=https://${BASEROW_HOSTNAME}
      - SECRET_KEY=${BASEROW_SECRET_KEY}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/baserow
      - REDIS_URL=redis://redis:6379
      - DISABLE_VOLUME_CHECK=yes
      # Memory optimization for AI LaunchKit
      - BASEROW_RUN_MINIMAL=yes
      - BASEROW_AMOUNT_OF_WORKERS=1
      # Email configuration (uses existing AI LaunchKit settings)
      - FROM_EMAIL=${EMAIL_FROM}
      - EMAIL_SMTP=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_SMTP_USE_TLS=${EMAIL_SMTP_USE_TLS}
    volumes:
      - baserow_data:/baserow/data
      - ./shared:/data/shared
    depends_on:
      baserow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/api/_health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    profiles: ["searxng"]
    restart: unless-stopped
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
   # cap_drop:
    #  - ALL  # Temporarily commented out for first run
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
      - ollama-gpu-amd

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    profiles: ["monitoring"]
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    profiles: ["monitoring"]
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    expose:
      - 9100

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    profiles: ["monitoring"]
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    profiles: ["monitoring"]
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
    volumes:
      - grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards # Standard path often used, let's use Grafana's managed dashboards dir
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - prometheus

  crawl4ai:
    image: unclecode/crawl4ai:latest # Use official image
    container_name: crawl4ai
    profiles: ["crawl4ai"]
    restart: unless-stopped
    shm_size: 1g # Recommended for browser operations
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 4G # Increased based on documentation recommendation

  gotenberg:
    image: gotenberg/gotenberg:8
    container_name: gotenberg
    profiles: ["gotenberg"]
    restart: unless-stopped
    environment:
      - DISABLE_GOOGLE_CHROME=false
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  letta:
    image: letta/letta:latest
    container_name: letta
    profiles: ["letta"]
    restart: unless-stopped
    volumes:
      - letta_data:/var/lib/postgresql/data
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-}
      SECURE: ${LETTA_SECURE:-true}
      LETTA_SERVER_PASSWORD: ${LETTA_SERVER_PASSWORD:-}
    extra_hosts:
      - "host.docker.internal:host-gateway"

  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:latest
    container_name: weaviate
    profiles: ["weaviate"]
    restart: unless-stopped
    volumes:
      - weaviate_data:/var/lib/weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "false"
      AUTHENTICATION_APIKEY_ENABLED: "true"
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${WEAVIATE_API_KEY}
      AUTHENTICATION_APIKEY_USERS: ${WEAVIATE_USERNAME}
      AUTHORIZATION_ENABLE_RBAC: "true"
      AUTHORIZATION_RBAC_ROOT_USERS: ${WEAVIATE_USERNAME}
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      ENABLE_API_BASED_MODULES: "true"
      CLUSTER_HOSTNAME: "node1"
      DEFAULT_VECTORIZER_MODULE: "none"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider http://localhost:8080/v1/.well-known/ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  ragapp:
    image: ragapp/ragapp:latest
    container_name: ragapp
    profiles: ["ragapp"]
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    profiles: ["portainer"]
    restart: unless-stopped
    volumes:
      - portainer_data:/data
      - ${DOCKER_SOCKET_LOCATION:-/var/run/docker.sock}:/var/run/docker.sock

  postiz:
    image: ghcr.io/gitroomhq/postiz-app:latest
    container_name: postiz
    profiles: ["postiz"]
    restart: always
    environment:
      BACKEND_INTERNAL_URL: http://postiz:3000
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres?schema=postiz"
      DISABLE_REGISTRATION: ${POSTIZ_DISABLE_REGISTRATION}
      FRONTEND_URL: ${POSTIZ_HOSTNAME:+https://}${POSTIZ_HOSTNAME}
      IS_GENERAL: "true" # Required for self-hosting.
      JWT_SECRET: ${JWT_SECRET}
      MAIN_URL: ${POSTIZ_HOSTNAME:+https://}${POSTIZ_HOSTNAME}
      NEXT_PUBLIC_BACKEND_URL: ${POSTIZ_HOSTNAME:+https://}${POSTIZ_HOSTNAME}/api
      NEXT_PUBLIC_UPLOAD_DIRECTORY: "/uploads"
      REDIS_URL: "redis://redis:6379"
      STORAGE_PROVIDER: "local"
      UPLOAD_DIRECTORY: "/uploads"
      # Social Media API Settings
      X_API_KEY: ${X_API_KEY}
      X_API_SECRET: ${X_API_SECRET}
      LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
      LINKEDIN_CLIENT_SECRET: ${LINKEDIN_CLIENT_SECRET}
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID}
      REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      BEEHIIVE_API_KEY: ${BEEHIIVE_API_KEY}
      BEEHIIVE_PUBLICATION_ID: ${BEEHIIVE_PUBLICATION_ID}
      THREADS_APP_ID: ${THREADS_APP_ID}
      THREADS_APP_SECRET: ${THREADS_APP_SECRET}
      FACEBOOK_APP_ID: ${FACEBOOK_APP_ID}
      FACEBOOK_APP_SECRET: ${FACEBOOK_APP_SECRET}
      YOUTUBE_CLIENT_ID: ${YOUTUBE_CLIENT_ID}
      YOUTUBE_CLIENT_SECRET: ${YOUTUBE_CLIENT_SECRET}
      TIKTOK_CLIENT_ID: ${TIKTOK_CLIENT_ID}
      TIKTOK_CLIENT_SECRET: ${TIKTOK_CLIENT_SECRET}
      PINTEREST_CLIENT_ID: ${PINTEREST_CLIENT_ID}
      PINTEREST_CLIENT_SECRET: ${PINTEREST_CLIENT_SECRET}
      DRIBBBLE_CLIENT_ID: ${DRIBBBLE_CLIENT_ID}
      DRIBBBLE_CLIENT_SECRET: ${DRIBBBLE_CLIENT_SECRET}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      DISCORD_BOT_TOKEN_ID: ${DISCORD_BOT_TOKEN_ID}
      SLACK_ID: ${SLACK_ID}
      SLACK_SECRET: ${SLACK_SECRET}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
      MASTODON_URL: ${MASTODON_URL}
      MASTODON_CLIENT_ID: ${MASTODON_CLIENT_ID}
      MASTODON_CLIENT_SECRET: ${MASTODON_CLIENT_SECRET}
    volumes:
      - postiz-config:/config/
      - postiz-uploads:/uploads/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  comfyui:
    image: yanwk/comfyui-boot:cu124-slim
    container_name: comfyui
    profiles: ["comfyui"]
    restart: unless-stopped
    environment:
      - CLI_ARGS=--listen 0.0.0.0 --cpu
    volumes:
      - comfyui_data:/home/runner
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8188"]
      interval: 10s
      timeout: 5s
      retries: 5

  faster-whisper:
    image: fedirz/faster-whisper-server:latest-cpu
    container_name: faster-whisper
    profiles: ["speech"]
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - WHISPER__MODEL=${WHISPER_MODEL:-Systran/faster-distil-whisper-large-v3}
      - WHISPER__COMPUTE_TYPE=int8
      - WHISPER__DEVICE=cpu
      - WHISPER__CPU_THREADS=4
    volumes:
      - whisper-models:/root/.cache/huggingface
      - ./shared:/data/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  openedai-speech:
    image: ghcr.io/matatonic/openedai-speech-min:latest
    container_name: openedai-speech
    profiles: ["speech"]
    restart: unless-stopped
    expose:
      - "8000"
    volumes:
      - ./openedai-voices:/app/voices
      - ./openedai-config:/app/config
    environment:
      - TTS_HOME=voices
      - HF_HOME=voices

  libretranslate:
    image: libretranslate/libretranslate:v1.6.1
    container_name: libretranslate
    profiles: ["libretranslate"]
    restart: unless-stopped
    environment:
      - LT_HOST=0.0.0.0
      - LT_PORT=5000
      - LT_CHAR_LIMIT=${LIBRETRANSLATE_CHAR_LIMIT:-10000}
      - LT_FRONTEND_LANGUAGE_SOURCE=${LIBRETRANSLATE_DEFAULT_SOURCE:-auto}
      - LT_FRONTEND_LANGUAGE_TARGET=${LIBRETRANSLATE_DEFAULT_TARGET:-en}
      - LT_API_KEYS=${LIBRETRANSLATE_API_KEYS:-false}
      - LT_API_KEYS_DB_PATH=/app/db/api_keys.db
      - LT_THREADS=${LIBRETRANSLATE_THREADS:-4}
      - LT_SUGGESTIONS=${LIBRETRANSLATE_SUGGESTIONS:-false}
      - LT_DISABLE_WEB_UI=${LIBRETRANSLATE_DISABLE_WEB_UI:-false}
      - LT_UPDATE_MODELS=${LIBRETRANSLATE_UPDATE_MODELS:-true}
      - LT_LOAD_ONLY=${LIBRETRANSLATE_LOAD_ONLY:-en,de,fr,es,it,nl,pl,pt,ru}
      - LT_METRICS=${LIBRETRANSLATE_METRICS:-false}
    volumes:
      - libretranslate_models:/home/libretranslate/.local
      - libretranslate_db:/app/db
      - ./shared:/data/shared
    # Removed Healthcheck - does not work reliably with this image
    # healthcheck:
    #   test: ['CMD-SHELL', 'wget -q --spider http://localhost:5000/languages || exit 1']
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 120s

  python-runner:
    image: python:3.11-slim
    container_name: python-runner
    profiles: ["python-runner"]
    restart: unless-stopped
    working_dir: /app
    command: /bin/sh -c 'if [ -f /app/requirements.txt ]; then python -m pip install --no-cache-dir -r /app/requirements.txt; fi; python /app/main.py'
    volumes:
      - ./python-runner:/app

  lightrag:
    image: ghcr.io/hkuds/lightrag:latest
    container_name: lightrag
    profiles: ["lightrag"]
    restart: unless-stopped
    volumes:
      - lightrag_data:/app/data/rag_storage
      - ./shared:/app/data/inputs
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_BINDING=ollama
      - LLM_BINDING_HOST=http://ollama:11434
      - EMBEDDING_BINDING=ollama
      - EMBEDDING_BINDING_HOST=http://ollama:11434
      - LLM_MODEL=llama3.2
      - EMBEDDING_MODEL=nomic-embed-text
      - EMBEDDING_DIM=768
      - WORKSPACE=${LIGHTRAG_WORKSPACE:-default}
      - AUTH_ACCOUNTS=${LIGHTRAG_AUTH_ACCOUNTS}
      - TOKEN_SECRET=${LIGHTRAG_TOKEN_SECRET}

  # Odoo Database Init - Create user and DB
  odoo-init:
    image: postgres:latest
    container_name: odoo-init
    profiles: ["odoo"]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    command: >
      sh -c "
      psql -h postgres -U postgres -c \"CREATE USER odoo WITH PASSWORD '${ODOO_DB_PASSWORD}' CREATEDB\" || true &&
      psql -h postgres -U postgres -c \"CREATE DATABASE odoo OWNER odoo\" || true &&
      echo 'Odoo user and database ready'
      "
    restart: "no"

  # Odoo Database Schema Init - Create tables
  odoo-schema-init:
    image: odoo:18.0
    container_name: odoo-schema-init
    profiles: ["odoo"]
    depends_on:
      odoo-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      - HOST=postgres
      - USER=odoo
      - PASSWORD=${ODOO_DB_PASSWORD}
    command: >
      sh -c "
      odoo --db_host postgres --db_user odoo --db_password ${ODOO_DB_PASSWORD} -d odoo -i base --stop-after-init || 
      echo 'Database already initialized'
      "
    restart: "no"

  # Odoo ERP/CRM System
  odoo:
    image: odoo:18.0
    container_name: odoo
    profiles: ["odoo"]
    restart: unless-stopped
    depends_on:
      odoo-schema-init:  # Waiting for Schema-Init!
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      - HOST=postgres
      - USER=odoo
      - PASSWORD=${ODOO_DB_PASSWORD}
    volumes:
      - odoo_data:/var/lib/odoo
      - ./shared:/data/shared:ro
    command: odoo --proxy-mode
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8069/web/login"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Easy!Appointments - Open Source Appointment Scheduler
  easyappointments:
    image: alextselegidis/easyappointments:latest
    container_name: easyappointments
    profiles: ["easyappointments"]
    restart: unless-stopped
    environment:
      # Application Configuration
      - BASE_URL=https://${EASYAPPOINTMENTS_HOSTNAME}
      - DEBUG_MODE=false
      # Database Configuration (using existing MySQL)
      - DB_HOST=mysql_leantime
      - DB_NAME=easyappointments
      - DB_USERNAME=root
      - DB_PASSWORD=${MYSQL_ROOT_PASSWORD}
      # Email Configuration (uses MAIL_* variables from mail system)
      - MAIL_PROTOCOL=smtp
      - MAIL_SMTP_HOST=${MAIL_SMTP_HOST}
      - MAIL_SMTP_PORT=${MAIL_SMTP_PORT}
      - MAIL_SMTP_USER=${MAIL_SMTP_USER}
      - MAIL_SMTP_PASS=${MAIL_SMTP_PASS}
      - MAIL_SMTP_CRYPTO=${MAIL_SMTP_CRYPTO}
      - MAIL_SMTP_DEBUG=${MAIL_SMTP_DEBUG:-0}
      - MAIL_SMTP_AUTH=${MAIL_SMTP_AUTH:-1}
      - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
      - MAIL_REPLY_TO_ADDRESS=${MAIL_FROM_ADDRESS}
      # Optional Google Calendar Integration
      - GOOGLE_SYNC_FEATURE=${EASYAPPOINTMENTS_GOOGLE_SYNC:-false}
      - GOOGLE_PRODUCT_NAME=${EASYAPPOINTMENTS_GOOGLE_PRODUCT_NAME:-}
      - GOOGLE_CLIENT_ID=${EASYAPPOINTMENTS_GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${EASYAPPOINTMENTS_GOOGLE_CLIENT_SECRET:-}
      - GOOGLE_API_KEY=${EASYAPPOINTMENTS_GOOGLE_API_KEY:-}
      # Timezone
      - TZ=${TZ:-UTC}
    volumes:
      - easyappointments_data:/var/www/html/storage
      - ./shared:/data/shared
    depends_on:
      mysql_leantime:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Vikunja Database Init - Create database
  vikunja-init:
    image: postgres:latest
    container_name: vikunja-init
    profiles: ["vikunja"]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    command: >
      sh -c "
      psql -h postgres -U postgres -c \"CREATE DATABASE vikunja\" || true &&
      echo 'Vikunja database ready'
      "
    restart: "no"

  # Task Management - Vikunja
  vikunja:
    image: vikunja/vikunja:latest
    container_name: vikunja
    profiles: ["vikunja"]
    restart: unless-stopped
    environment:
      # Database Configuration (uses existing PostgreSQL)
      - VIKUNJA_DATABASE_TYPE=postgres
      - VIKUNJA_DATABASE_HOST=postgres
      - VIKUNJA_DATABASE_USER=${POSTGRES_USER}
      - VIKUNJA_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - VIKUNJA_DATABASE_DATABASE=vikunja
      # Service Configuration
      - VIKUNJA_SERVICE_PUBLICURL=https://${VIKUNJA_HOSTNAME}
      - VIKUNJA_SERVICE_JWTSECRET=${VIKUNJA_JWT_SECRET}
      - VIKUNJA_SERVICE_ENABLEREGISTRATION=true
      - VIKUNJA_SERVICE_ENABLETASKATTACHMENTS=true
      - VIKUNJA_SERVICE_MAXAVATARSIZE=1024
      - VIKUNJA_SERVICE_MAXATTACHMENTSIZE=20971520  # 20MB
      # Optional: Set timezone
      - VIKUNJA_SERVICE_TIMEZONE=${TZ:-UTC}
    volumes:
      - vikunja-files:/app/vikunja/files
      - ./shared:/data/shared
    depends_on:
      vikunja-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3456/api/v1/info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MySQL - Database for Leantime and other MySQL-based services
  mysql_leantime:
    image: mysql:8.4
    container_name: mysql_leantime
    profiles: ["mysql"]
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: leantime
      MYSQL_PASSWORD: ${LEANTIME_DB_PASSWORD}
    volumes:
      - mysql_leantime_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Leantime - Full Project Management Suite
  leantime:
    image: leantime/leantime:latest
    container_name: leantime
    profiles: ["leantime"]
    restart: unless-stopped
    environment:
      # Database Configuration
      - LEAN_DB_HOST=mysql_leantime
      - LEAN_DB_USER=leantime
      - LEAN_DB_PASSWORD=${LEANTIME_DB_PASSWORD}
      - LEAN_DB_DATABASE=leantime
      - LEAN_DB_PORT=3306
      # Application Configuration
      - LEAN_APP_URL=https://${LEANTIME_HOSTNAME}
      - LEAN_SITENAME=Leantime
      - LEAN_SESSION_PASSWORD=${LEANTIME_SESSION_PASSWORD}
      - LEAN_SESSION_EXPIRATION=28800  # 8 hours
      - LEAN_DEFAULT_TIMEZONE=${TZ:-UTC}
      # Language & Theme
      - LEAN_LANGUAGE=en-US
      - LEAN_DEFAULT_THEME=default
      # User/Group mapping (optional)
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      # Features
      - LEAN_ENABLE_MENU_TYPE=true
      - LEAN_ENABLE_FOOTER=true
      # Email (optional, can be configured later)
      - LEAN_EMAIL_RETURN=${USER_EMAIL:-}
      - LEAN_EMAIL_USE_SMTP=false
    volumes:
      - leantime-public:/var/www/html/public/userfiles
      - leantime-userfiles:/var/www/html/userfiles
      - leantime-plugins:/var/www/html/app/Plugins
      - leantime-logs:/var/www/html/storage/logs
      - ./shared:/data/shared
    depends_on:
      mysql_leantime:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  perplexica:
    build:
      context: ./perplexica
      dockerfile: app.dockerfile
    container_name: perplexica
    profiles: ["perplexica"]
    restart: unless-stopped
    environment:
      - SEARXNG_API_URL=http://searxng:8080
      - DATA_DIR=/home/perplexica
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ./perplexica/backend-dbstore:/home/perplexica/data
      - ./perplexica/uploads:/home/perplexica/uploads
      - ./perplexica/config.toml:/home/perplexica/config.toml
      - ./shared:/data/shared
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - searxng

  # ============================================================================
  # MAIL SERVICES
  # Mailpit: Always active mail catcher for development/testing
  # Postal: Optional production mail server (activate via profile)
  # ============================================================================
  
  # Mailpit - Mail Catcher (ALWAYS ACTIVE - NO PROFILE!)
  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    # NO profiles tag - always runs!
    restart: unless-stopped
    volumes:
      - mailpit_data:/data
      - ./shared:/data/shared
    environment:
      MP_DATABASE: /data/mailpit.db
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
      MP_UI_AUTH_FILE: ${MAILPIT_UI_AUTH_FILE:-}
      MP_MAX_MESSAGES: ${MAILPIT_MAX_MESSAGES:-5000}
    expose:
      - "1025"  # SMTP
      - "8025"  # Web UI
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # POSTAL - Production Mail Server (OPTIONAL - requires real domain)
  # ============================================================================
  
  postal-mariadb:
    image: mariadb:10
    container_name: postal-mariadb
    profiles: ["postal"]
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: ${POSTAL_DB_ROOT_PASSWORD}
      MARIADB_DATABASE: postal
    volumes:
      - postal_mariadb:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p${POSTAL_DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3

  postal-rabbitmq:
    image: rabbitmq:3.8-alpine
    container_name: postal-rabbitmq
    profiles: ["postal"]
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: postal
      RABBITMQ_DEFAULT_PASS: ${POSTAL_RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /postal
    volumes:
      - postal_rabbitmq:/var/lib/rabbitmq

  postal:
    image: ghcr.io/postalserver/postal:latest
    container_name: postal
    profiles: ["postal"]
    restart: unless-stopped
    command: ["postal", "run"]
    depends_on:
      - postal-mariadb
      - postal-rabbitmq
    volumes:
      - ./postal/config:/config
      - postal_assets:/opt/postal/public/assets
      - postal_uploads:/storage
      - ./shared:/data/shared
    environment:
      POSTAL_CONFIG_FILE: /config/postal.yml
      POSTAL_FNAME: ${POSTAL_FNAME:-Postal}
      POSTAL_LNAME: ${POSTAL_LNAME:-Admin}
      POSTAL_EMAIL: ${POSTAL_EMAIL:-${USER_EMAIL}}
      POSTAL_USERNAME: ${POSTAL_USERNAME}
      POSTAL_PASSWORD: ${POSTAL_PASSWORD}
    ports:
      - "25:25"     # SMTP - May be blocked by VPS provider
      - "587:587"   # Submission (TLS)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postal-worker:
    image: ghcr.io/postalserver/postal:latest
    container_name: postal-worker
    profiles: ["postal"]
    restart: unless-stopped
    command: ["postal", "worker"]
    depends_on:
      - postal
    volumes:
      - ./postal/config:/config
      - postal_uploads:/storage
    environment:
      POSTAL_CONFIG_FILE: /config/postal.yml
